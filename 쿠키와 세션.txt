<쿠키와 세션>

서블릿 프로그램에서 일반적으로 스레드를 연결 상태로 유지하는 것이 아닌 요청당 connection 방식을 취한다.
그러므로 요청이 들어올 때 스레드가 생겨나며 요청 값 처리 후 클라이언트에게 응답 결과를 리턴하게 되면 해당 스레드는
스레드 풀에 반납되고 안에 있던 값들은 소멸된다. 따라서 데이터를 유지할 수 없게 된다. 물론 요청이 들어올 때 마다
DB에 저장하고 저장한 값을 꺼내올 순 있지만 매번 DB와 연결한다면 무분별한 resource 낭비가 될 수 있으며 이는 프로그램
성능 저하로 이어질 수 있다.

이러한 이유로 DB와 지속적인 connection 없이 데이터를 유지할 필요가 있다. 데이터를 유지하기 위해선 이 데이터를 저장할
공간이 필요하다. 정리하자면 웹 프로그래밍에서 HTTP 프로토콜 방식은 Connectionless와 Stateless 방식의 특징이
있으므로 데이터를 저장할 공간이 필요하다. 이러한 문제를 해결하기 위한 공간으로 웹 프로그래밍에선 쿠키(Cookie)와 세션(Session)을 사용한다.

쿠키와 세션은 둘 다 상태정보를 저장하는 공간으로서의 역할이 동일하지만 가장 큰 차이점은 저장되는 위치에 있다.
쿠키의 경우 클라이언트(로컬PC)에 저장하고, 세션은 서버에 데이터를 저장한다. 우선 쿠키와 세션을 먼저 정리해보자.

쿠키(Cookie)는 HTTP의 일종으로 클라이언트(웹브라우저)가 어떠한 웹 사이트를 방문할 경우 그 사이트가 사용하고 있는 서버에서 사용자의 컴퓨터에 
저장하는 작은 기록 정보 파일이다. HTTP에서 클라이언트의 상태 정보를 클라이언트의 컴퓨터에 저장하였다가 필요시 정보를 참조하거나 재사용할 수 있다. 
사용예: 방문했던 사이트에 다시 방문 하였을 때 아이디와 비밀번호 자동 입력, 파업창을 통해 "오늘 이 창을 다시 보지 않기" 체크

세션(Session)은 일정 시간동안 같은 클라이언트(웹브라우저)로부터 들어오는 일련의 요구를 하나의 상태로 보고, 그 상태를 일정하게 유지시키는 기술이다. 
여기서 일정 시간은 방문자가 웹 브라우저를 통해 웹 서버에 접속한 시점으로부터 웹 브라우저를 종료하여 연결을 끝내는 시점을 말한다.

동작 프로세스
1) 클라이언트가 서버로 요청을 보내게 되면 쿠키를 사용하고자 할 경우 서버에서 쿠키를 생성해서 응답 페이지와 함께 클라이언트로 전송한다. 
2) 서버로 부터 생성되어 클라이언트가 전송 받은 쿠키는 클라이언트의 로컬PC에 저장된다.
3) 다시 해당 서버로 요청시에 만들어진 쿠키가 있다면 쿠키를 함께 전송한다. 여기서 해당 서버의 요청인지의 구별은 Session ID를 통해 해결한다.
4) 서버가 요청을 받게되면 요청의 Request-Header 필드인 Cookie에서 Session-Id를 확인한다. 만약, Session-Id가 없을 경우 서버에서 Session-Id를 생성 후
   쿠키에 담아서 응답시에 보낸다.
5) 그렇게 Session-Id까지 담아서 보내진 쿠키를 클라이언트의 로컬 PC에 저장한다.

여기서 Session-Id를 만들어서 클라이언트로 보내는 이유는 Session ID로 클라이언트를 서버에서 구분하기 위함이다.

그런데 세션을 쓰면되는데 굳이 쿠키를 사용하는 이유는 무엇일까? 그 이유는 리소스 관리를 위함 때문이다. 한 두개의 요청이면 몰라도 수백 수천건의 요청이
들어올 경우 해당 데이터를 서버에서 저장하고 관리할 경우 그만큼 리소스를 사용하기에 부담이 크다. 세션의 경우 서버에 데이터를 저장하는 방식으로 서버의 리소스를
사용하기 때문에 수 많은 요청시에 서버에서 사용되는 리소스가 많아질 수 밖에 없다. 이와 반대로 클라이언트 로컬PC에 데이터를 저장하는 쿠키는 클라이언트 요청별로
각자의 로컬PC에 데이터를 저장하고 관리하므로 서버의 리소스 부담을 덜어 낼 수 있다는 장점 때문이다.
