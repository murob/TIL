============================== 1과목 소프트웨어 설계 ==============================
요구사항 검토 방법
1) 동료 검토: 2~3명이 진행하는 리뷰형태로 작성자가 설명하고 이해관계자들이 설명을 들으면서 결함을 발견하는 형태
2) 워크스루: 검토 회의 전 명세서를 미리 배포하여 사전 검토 후 짧은 검토 회의를 통해 오류 조기 검출
3) 인스펙션: 명세서 작성자를 제외한 다른 검토 전문가들이 확인하면서 결함을 발견하는 형태

코드 부여 방법
1) 연상 코드: 항목의 명칭이나 약호와 관계 있는 숫자, 문자, 기호를 이용하여 코드를 부여하는 방법(문자, 기호)
2) 블록 코드: 대상 항목에서 공통적인 것을 블록으로 구분하고 블록 내에 일련 번호를 부여하는 방법(블록)
3) 순차 코드: 일정 기준에 따라 최초의 자료부터 일련번호를 부여하는 방법(일련번호 부여)
4) 표의 숫자 코드: 길이 넓이 부피 등 항목의 성질의 물리적인 수치를 그대로 코드에 적용시키는 방법(물리적인 수치)

데이터 흐름도(Data Flow Diagram)
프로세스(Process), 자료흐름(Flow), 자료저장소(Data Store), 단말(Terminator)

어플리케이션 성능 측정 항목
1) 응답시간(Response Time)
2) 가용성(Availability)
3) 사용률(Utilization)
4) 경과시간

UML 확장 모델 스테레오 타입 객체 표현기호: <<>>


GoF 디자인패턴
- 생성패턴: Abstract Factory, Builder, Factory Methods, Prototype, Singleton
- 구조패턴: Adapter, Bridge
- 행위패턴: Command, Observer, State, Template Method, Visitor

자료사전 기호
- 정의 =
- 구성, 연결 +
- 반복 {}
- 주석 **
- 선택 [|]
- 생략 ()


미들웨어
1) RPC: remote procedure call 원격 절차 호출 또는 원격 프로시저 호출
2) ORB: object request broker 객체 간 메시지 전달을 지원하는 미들웨어(객체지향 미들웨어)
3) TP monitor: 트랜잭션 처리를 감시/제어하는 미들웨어

UI설계원칙
1) 직관성: 누구나 쉽게 이용하고 쉽게 사용할 수 있어야 함
2) 유효성: 정확하고 완벽하게 사용자의 목표가 달성될 수 있도록 제작
3) 학습성: 초보와 숙련자 모두가 쉽게 배우고 사용할 수 있게 제작
4) 유연성: 사용자의 인터랙션으 ㄹ최대한 포용하고, 실수를 방지할 수 있도록 제작

XP(eXtreme Programming)의 5가지 원칙
1) 용기(Courage): 고객의 요구사항 변화에 능동적인 대처
2) 단순성(Simplicity): 부가적 기능, 사용되지 않는 구조와 알고리즘 배제
3) 커뮤니케이션(Communication): 개발자, 관리자, 고객 간의 원활한 의사소통
4) 피드백(Feedback): 지속적인 테스트와 반복적 결함 수정, 빠른 피드백
5) 존중(Respect): 모든 프로젝트 관리자는 팀원의 기여를 존중

럼바우(Rumbaugh)의 객체지향 분석 절차
객체 모형 -> 동적 모형 -> 기능 모형
1) 객체 모델링: 객체 다이어그램(객체 관계)으로 표시, 가장 중요하며 선행되어야 함
2) 동적 모델링: 상태 다이어그램(상태도)를 이용해 시간의 흐름에 따른 객체들간의 제어흐름, 상호작용, 동작순서 등의 동적인 행위를 표현하는 모델링
3) 기능 모델링: 자료 흐름도(DFD)를 이용하여 다수의 프로세스들 간의 자료흐름을 중심으로 처리

공통모듈 원칙
- 정확성: 해당 기능이 실제 시스템 구현시 필요한지 아닌지를 알 수 있도록 정확하게 작성
- 명확성: 해당 기능에 대해 일관되게 이해하고 한가지로 해석될 수 있도록 작성
- 완전성: 시스템이 구현될 때 필요하고 요구되는 모든 것을 기술
- 일관성: 공통 기능 간에 상호 충돌이 없도록 작성
- 추적성: 공통 기능에 대한 요구사항 출처와 관련 시스템 등의 유기적 관계에 대한 식별이 가능하도록 작성

객체지향 기법
- 집단화: is part of(part가 들어가면 집단화 생각) 클래스의 구조적인 집약 관계 "클래스 A는 클래스 B와 클래스 C로 구성된다."
- 일반화: is a 클래스들 간의 개념적인 포함 관계 "자식 클래스 A는 부모 클래스 B의 일종이다."
- 캡슐화: 속성(데이터)과 메소드(연산)를 하나로 묶어서 객체로 구성된다.
- 추상화: 공통 성질을 추출하여 수퍼클래스로 구성한다. 또한, 객체 중심의 안정된 모델을 구축 가능하며 현실 세계를 자연스럽게 표현한다.

CASE 주요 기능
- CASE란 소프트웨어 개발의 자동화를 말한다.
1) S/W의 생명주기 전(모든)단계의 연결
2) 모델들 사이의 모순검사
3) 오류검증
4) 자료흐름도 등 다이어그램 작성
5) 다양한 소프트웨어 개발 모형 지원
6) 시스템 문서화 및 명세화를 위한 그래픽 지원

DBMS분석시 고려사항
1) 무결성(가용성)
2) 일관성(상호호환성)
3) 회복
4) 보안
5) 효율성(성능)
6) 데이터베이스 확장

HIPO(Hierarchy Input Process Output)은 하향식 소프트웨어 개발을 위한 문서화 도구이다.

객체지향 분석 방법론
1) 럼바우(Rumbaugh): 가장 일반적으로 사용되는 방법으로 분석활동을 객체/동적/기능 모델로 나누어 수행하는 방법
2) Booch: 미시적 개발 프로세스와 거시적 개발 프로세스를 모두 사용하는 분석방법
3) Jacobson: Use Case를 강조하여 사용하는 분석방법
4) Coad와 Yourdon: E-R다이어그램을 사용하여 개체의 활동들을 데이터 모델링하는데 초점을 둔 기법
5) Wirfs-Brock: 분석과 설계간의 구분이 없고 고객 명세서를 평가해서 설계 작업까지 연속적으로 수행하는 

============================== 2과목 소프트웨어 개발 ==============================
정렬 알고리즘
- 선택정렬: O(n^2)
- 삽입정렬: O(n^2)
- 버블정렬: O(n^2)
- 합병정렬: O(Nlog2N)

WhiteBoxTesting & BlackBoxTesting
- WhiteBoxTesting: Condition Testing, Loop Testing, Data Flow Testing
- BlackBoxTesting: Equivalence Partitioning Testing, Boundary Value Testing, Cause-Effect Graphing Testing, Error Guessing, Comparison Testing

소프트웨어 품질 측정(개발자 관점)
- 정확성, 신뢰성, 효율성, 무결성, 유연성, 이식성, 재사용성, 상호운용성

인터페이스 구현 검증 도구
- xUnit: Java, C++ 등 다양한 언어 지원하는 단위 테스트 프레임워크
- STAF: 서비스 호출 및 컴포넌트 재사용 등 환경 지원하는 테스트 프레임워크
- FitNesse: 웹 기반 테스트케이스 설계, 실행, 결과 확인 등을 지원하는 테스트 프레임워크
- NTAF: FitNesse의 장점인 협업 기능과 STAF의 장점인 재사용 및 확장성을 통합한 네이버의 테스트 자동화 프레임워크이다.
- Selenium: 다양한 브라우저 및 개발 언어 지원하는 웹 애플리케이션 테스트 프레임워크
- Watir: Ruby를 사용하는 애플리케이션 테스트 프레임워크
- Ruby: 인터프리터 방식의 객체지향 스크립트 언어

EAI(Enterprise Application Integration) 구축 유형
- 기업 내 각종 애플리케이션 및 플랫폼 간의 정보 전달 연계 통합등 상호연동이 가능하게 해주는 솔루션
1) Point-to-Point: 가장 기본적인 애플리케이션 통합 방식 1:1로 연결
2) Hub&Spoke: 단일 접점인 허브 시스템을 통해 데이터 전송하는 중앙 집중형 방식
3) Message Bus: 애플리케이션 사이에 미들웨어를 두어 처리하는 방식
4) Hybrid: Hub&Spoke와 Message Bus 혼합 방식

트리순회
- 전위순회: root -> left -> right
- 중위순회: left -> root -> right
- 후위순회: left -> right -> root

정규화
- 정규화(Normalization)의 기본 목표는 테이블 간에 중복된 데이터를 허용하지 않는다는 것이다. 
  중복된 데이터를 허용하지 않음으로써 무결성(Integrity)를 유지할 수 있으며, DB의 저장 용량 역시 줄일 수 있다.
1) 제1정규화: 테이블의 컬럼이 원자값(Atomic Value, 하나의 값)을 갖도록 테이블을 분해나는 것
2) 제2정규화: 제1정규화를 진행한 테이블에 대해 완전 함수 종속을 만족하도록 테이블을 분해하는 것(완전함수종속: 기본키의 부분집합이 결정자가 되어선 안된다는 것)
3) 제3정규화: 제2정규화를 진행한 테이블에 대해 이행적 종속을 없애도록 테이블을 분해하는 것(이행적 종속: A->B, B->C, A->C)
4) BCNF정규화: 제3정규화를 진행한 테이블에 대해 모든 결정자가 후보키가 되도록 테이블을 분해하는 것

반정규화 중복 테이블 추가 방법
- 진행 테이블 추가
- 집계 테이블 추가
- 특정 부분만을 포함하는 테이블 추가


트리의 차수와 단말 노드
- 트리의 차수: 전체 트리에서 가장 큰 차수
- 단말 노드: 자식이 없는 노드

디지털 저작권 관리(DRM) 기술 요소
- 암호화
- 키관리
- 암호화 파일 생성
- 식별 기술
- 저작권 표현
- 정책 관리
- 크랙 방지
- 인증

Pareto의 법칙: 오류의 80%는 전체의 20%내에서 발견된다는 법칙
Brooks의 법칙: 지연되는 프로젝트에 인력을 더 투입하면 오히려 더 늦어진다.

소프트웨어 형상관리: 개발과정에서 소프트웨어의 변경사항을 관리하기 위해 개발된 일련의 활동

알고리즘 시간 복잡도
O(1): 비례하지 않는(항상 일정한)
O(log2^n): 로그에 비례하는
O(n): 정비례하는(선형)
O(nlog2^n): 로그*변수에 비례하는(선형로그)
O(n^2): 제곱에 비례하는
O(n^3): 세제곱에 비례하는
O(2^n): 지수 비례하는
O(n!): 팩토리얼에 비례하는

소스코드 품질분석 도구
- 정적분석 도구: pmd, cppcheck, SonarQube, checkstyle, ccm, cobertura
- 동적분석 도구: Avalanche, valgrind ==> (val이 들어가면 동적분석 도구인듯)


검증 검사 기법
- 동치 분할 검사: 입력 자료에 초점을 맞춰 케이스를 만들고 검사하는 방법 (블랙박스 테스트 종류)
- 알파 테스트: 개발자의 장소에서 사용자가 개발자 앞에서 행하는 테스트기법 (인수테스트종류)
- 베타 테스트: 선정된 최종 사용자가 여러명의 사용자 앞에서 행하는 테스트 기법 (인수테스트종류)
- 형상 검사(구성 검토, 검사): 구성 요소, 목록, 유지보수를 위한 모든 사항이 표현되었는가를 검사

시험용 모듈
- Driver: 상향식
- Stub: 하향식

SW패키징 도구 활용시 고려 사항
- 사용자의 운영체제, CPU, 메모리 등에 필요한 최소 환경 정의
- UI는 편의성, 직관성을 고려해야하고 매뉴얼과 일치시켜 패키징
- 소프트웨어와 하드웨어가 함께 관리될 수 있도록 Managed Service 형태로 제공
- 암호화, 모듈화하여 배포(다양한 기종에서 사용이 가능해야 함)

외계인코드(Alien Code)
- 없는 존제 = 코드에 대해 아는 사람이 없음 -> 

============================== 3과목 데이터베이스 구축 ==============================
트랜직션 특성
1) Durability(영속성): 성공적으로 완료된 트랜잭션의 결과는 시스템이 고장나더라도 영구적으로 반영되어야 한다.
2) Consistency(일관성): 트랜잭션이 그 실행을 성공적으로 완료하면 언제나 일관성 있는 데이터베이스 상태로 변환한다.
3) Atomicity(원자성): 트랜잭션 연산은 데이터베이스에 모두 반영되든지 아니면 전혀 반영되지 않아야 한다.
4) Isolation(격리성): 트랜잭션 실행 중 생성하는 연산의 중간 결과를 다른 트랜잭션이 접근 불가하다.

참조무결성
1) PRIMARY KEY: 기본키 정의
2) FOREIGN KEY: 외래키 정의
3) UNIQUE: 지정 속성은 중복값 가질 수 없음
4) NO ACTION: 변화가 있어도 조취를 취하지 않음
5) CASCADE: 참조 테이블 튜플 삭제 시 관련 튜픈 모두 삭제 및 속성 변경 시 속성값 모두 변경
6) RESTRICTED: 타 개체가 제거할 요소를 참조중이면 제거를 취소
7) SET NULL: 참조 테이블 변화 시 기본 테이블 관련 속성값 NULL로 변경
8) SET DEFAULT: 참조 테이블 변화 시 기본테이블의 관련 튜플 속성값을 기본값으로 변경
9) CONSTRAINT: 제약 조건 이름 지정
10) CHECK: 속성값에 대한 제약 조건 정의


============================== 4과목 프로그래밍언어 활용 ==============================
쉘(Shell) 커널(Kernel)
사용자(명령) -> 쉘(해석) -> 커널(명령 수행 후 결과 전송) -> 쉘(해석) -> 사용자(결과 확인)
-쉘: 사용자와 운영체제간에 대화를 가능하게 해주는 명령어 해석기 역할을 한다.
-커널: 소프트웨어와 하드웨어 간의 커뮤니케이션을 관리하는 프로그램, 입출력을 관리하고 컴퓨터에 있는
        하드웨어(CPU, 메모리, 저장장치 등)가 처리할 수 있도록 요청을 변환하는 역할 항상 메모리에 상주함

결합도
자료 < 스탬프 < 제어 < 외부 < 공통 < 내용
자스제외공내

응집도
우연적 < 논리적 < 시간적 < 절차적 < 교환적 < 순차적 < 기능적
우논시절교순기(CLTPCSF)

교착상태 필요충분조건
1) 상호배제
2) 점유와 대기
3) 환형 대기
4) 비선점

IPv4
주소체계: 브로드캐스트
크기: 64kbyte 고정

IPv6 
주소체계: 유니캐스트 + 멀티캐스트 + 애니캐스트
크기: 임의로 확장 가능

OSI 7계층
1) 물리 계층
2) 데이터링크 계층
3) 네트워크 계층
4) 전송 계층
5) 세션 계층
6) 표현 계층
7) 응용 계층


============================== 5과목 정보시스템 구축관리 ==============================
서비스 공격 유형
1) DoS(서비스 거부): 표적이 되는 서버의 자원을 고갈시킬 목적으로 다수 공격자 or 시스템에서 대량의 데이터를 한 곳에 집중적으로 전송함
2) Ping of Death: Ping 명령을 전송할 때 패킷의 크기를 인터넷 프로토콜 허용범위 이상으로 전송하여 공격 대상의 네트워크를 
	          마비시키는 서비스 거부 공격
3) Smurfing: IP나 ICMP의 특성을 악용 엄청난 양의 데이터를 한 사이트에 집중적으로 보냄으로써 네트워크를 불능 상태로
	    만드는 공격 방법
4) SYN Flooding: TCP는 신뢰성 있는 전송을 위해 3-way-handshake를 거친 후 데이터를 전송하는데 SYN은 공격자가 가상의
	          클라이언트로 위장 3WH를 의도적으로 중단, 서버가 대기상태에 놓여 정상 서비스를 못하게 하는 공격 방법
5) TearDrop: Offset 값을 변경시켜 수신 측에서 패킷을 재조립할 때 오류로 인한 과부하를 발생 시킴
6) Land: 패킷을 전송할 때 송 수신 IP주소를 모두 공격대상은 송신IP주소가 자신이기 때문에 자신에게 무한히 응답하게 되는 공격
7) DDos(분산 서비스 거부): 여러 곳에 분산된 공격 지점에서 한 곳의 서버에 대해 분산 서비스 공격을 수행
 
CMM(Capability Maturity Model) 모델 레벨
초기단계 -> 관리단계 -> 정의단계 -> 정량적관리단계 -> 최적화단계

네트워크 관리 신기술
1) IoT: 정보통신기술 기반 사물인터넷
2) M2M: 무선 통신을 이용한 기계와 기계사이의 통신
3) 모바일 컴퓨팅: 휴대형 기기로 네트워크에 접속하여 업무를 처리할 수 있는 환경
4) 클라우드 컴퓨팅: 각종 컴퓨팅 자원을 중앙에 두고 인터넷을 통해 컴퓨터 작업을 할 수 있는 환경
5) 모바일 클라우드 컴퓨팅(MCC): 클라우드 서비스 이용 소비자끼리 클라우드 컴퓨팅 인프라 구성하여 정보 자원을 공유
6) 인터클라우드 컴퓨팅: 각기 다른 클라우드 서비스를 연동
7) 메시 네트워크: 차세대 이동통신 공공안전 등 특수목적을 위한 네트워크 기술
8) 와이선: 장거리 무선 통신 기술
9) NDN: 콘텐츠 자체의 정보와 라우터 기능만으로 데이터 전송
10) NGN: 유선망 기반의 차세대 통신망
11) SDN: 네트워크를 컴퓨터처럼 모델링
12) NFC: 고주파 이용한 근거리 무선통신 기술
13) UWB: 짧은 거리에서 만은 양의 데이터 전송기술
14) PICONET: 여러개의 독립된 통신장치가 블루투스 기술이나 UWB 통신 기술 사용 통신망 형성
15) WBAN: 웨어러블 형태 기기 무선 연결 기술
16) GIS: 지리적 자료 수집 정장 분석 출력 기술
17) USN: 각종 센서로 수집한 정보를 무선으로 수집하도록 구성한 기술
18) SON: 주변 상황에 맞추어 스스로 망을 구성
19) ad-hoc network: 재난 현장과 같은 고정 유선망 사용 불가능한 장소에 모바일 호스트만으로 구성
20) 네트워크 슬라이딩: 3GPP를 포함(5G핵심기술)
21) 저전력 블루투스 기술: 일반 블루투스와 동일 벗, 대기상태에는 절전모드 유지
22) 지능형 초연결망: 정부 주관 사업

COCOMO
라인수: Organic < Semi-detached < Embedded
- Oranic: 조직형 / 소규모 소프트웨어 일괄 자료 처리 / 5만라인 이하
- Semi-detached: 반분리형 / 트랜잭션 처리 시스템이나 운영체제, DB / 30만 라인 이하
- Embedde: 내장형 / 최대형 규모 트랜잭션 처리 시스템이나 운영체제 / 30만 라인 이상

해킹공격
1) 좀비PC: 악성코드에 감염되어 다른 프로그램 or 컴퓨터를 조종하도록 만들어진 컴퓨터
2) C&C서버: 좀비PC에 명령을 내리고 악성코드를 제어하기 위한 용도의 서버
3) 봇넷: 악성 프로그램에 감염되어 악의적인 의도로 사용될 수 있는 네트워크 연결 형태
4) 웜: 연속적으로 자신을 복제하여 시스템 부하를 높임으로써 시스템을 다운시키는 바이러스
5) 제로데이 공격: 취약점 발견 시 취약점 존재를 알리기전에 해당 취약점을 통해 이뤄지는 보안 공격
6) 키로거 공격: 컴퓨터 사용자의 움직임을 탐지 개인정보를 몰래 빼가는 공격
7) 램섬웨어: 내부 문서나 파일 등을 암호화해서 사용자가 열지 못하게 하는 프로그램
8) 백도어: 설계자가 서비스 기술자의 편의를 위해 보안을 제거하여 만들어 놓은 비밀 통로
9) 트로이목마: 정상적인 기능인 척하는 악성 프로그램

비용산정기법
1) 전문가 감정 기법: 조직내에 있는 두명 이상의 전문가에게 의뢰
2) 델파이 기법: 많은 전문가의 의견을 종합
3) LOC 기법: 원시코드 라인 수 기법
4) 개발 단계별 인원수 기법: LOC기법 보안, 필요 노력을 생명 주기의 각 단계별로 선정
5) COCOMO: 보헴이 제안, LOC에 의한 비용 산정 기법

암호화 알고리즘 기법
1) RSA: 소인수 분해 문제를 이용한 공개키 암호화 기법
2) ECC: 오류 정정 코드 메모리
3) PKI: 공개키 기반 구조
4) PEM: SSL 인증서 종류

소프트웨어 생명 주기 모형
1) 폭포수: 선형 순차적 / 메뉴얼 작성 / 각 단계가 끝난 뒤 다음 단계로 넘어감
2) 프로토: 원형 모형으로 실제 개발될 제품의 견본을 만들어 결과물을 예측하는 모형
3) 나선형: 점진적 모형 / 위험을 관리 및 최소화하는 것이 목적 / 유지보수가 필요 없다
4) 애자일: 고객 중심적 모형 / 일정 주기를 반복하면서 개발과정 진행

정보보안 침해 관련 공격
1) Smishing: SMS+피싱 즉, SMS를 이용하는 피싱 사기
2) C-brain: MS-DOS용 컴퓨터 바이러스 / 기억 매체의 시동 섹터를 감염
3) Trojan Horse: 정상적인 기능인 척하는 악성 프로그램
4) Ransomware: 침입한 컴퓨터의 내부 파일을 열지 못하게 암호화하는 공격

프로그램 보안 기술
1) Stack Protection: Stack Overflow를 탐지하고 보안을 강화시키는 기법
2) Stack Guard: Stack 상에 특정 값을 저장해뒀다가 그 값이 변경 되었을 경우 오버플로우 상태로 가정하여 프로그램 실행을 중단
3) Stack Shield: 함수의 리턴주소를 복사하여 실제 리턴주소를 참조하지 않고 함수를 리턴해주는 기법
4) Syslog: 시스템에서 로그메시지를 처리하기 위해서 제공
5) Recovery Control: 장애/혼란을 정돈하고 정상상태로 회복

시스템 내의 정보는 오직 인가된 사용자만 수정할 수 있는 보안 요소 => 무결성

용어
[DB]
- 하둡: 오픈 소스를 기반으로 한 분산 컴퓨팅 플랫폼
- 디지털 아카이빙: 디지털 정보 자원을 장기적으로 보존하기 위한 작업
- 타조: 우리나라가 주도적으로 개발 중인 하둡 기반의 분산 데이터 웨어하우스 프로젝트
- 데이터 다이어트: 데이터를 삭제하는 것이 아닌 압축하고 중복된 정보를 배제하고 새로운 기분에 따라 나누어 저장하는 작업
- 메타 데이터: 일련의 데이터를 정의하고 설명해주는 데이터

[네트워크]
- 비콘: 블루투스 기반의 근거리 무선통신 장치
- NFC: 고주파를 이용한 근거리 무선 통신 기술
- NDN: 콘텐츠 자체의 정보와 라우터 기능만으로 데이터 전송을 수행하는 기술
- NGN: 유선망 기반의 차세대 통신망
- 포스퀘어: 위치 기반 소셜 네트워크 서비스

[HW]
- 엠디스크: 한 번의 기록만으로도 자료를 영구 보관할 수 있는 광 저장 장치
- 맴리스터: 메모리와 레지터스터의합성어로 전류의 방향과 양 등 기존의 경험을 모두 기억하는 소자. 차세대 메모리 기술

Cron: 작업 예약 스케쥴러
Tripwire: 크래커가 침입하여 백도어를 만들어 놓거나 설정 파일을 변경했을 때 분석하는 도구

테일러링(Tailoring): 프로젝트 상황 특성에 맞게 정의된 소프트웨어 개발 방법론 절차, 사용기법 등을 수정 및 보완하는 작업
- 내부적 요건: 목표환경 / 요구사항 / 프로젝트규모 / 보유기술
- 외부적 요건: 법적 제약사항 / 표준 품질 기준
